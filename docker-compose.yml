services:
  inventory-management-service:
    image: 'inventory-management-service:latest'
    container_name: inventory-management-service
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NEW_RELIC_AGENT_JAR_PATH: ${NEW_RELIC_AGENT_JAR_PATH}
    env_file:
      - ./.env
    depends_on:
      - postgres
      - zipkin
      - prometheus
      - redis
      - kafka
    environment:
      - DB_HOST=postgres:5432 # Postgres container name and port
      - ZIPKIN_HOST=zipkin # Zipkin container name
      - REDIS_HOST=redis # Redis container name
      - REDIS_PORT=${REDIS_DOCKER_PORT} # Redis port
      - KAFKA_CONSUMER_BOOTSTRAP_SERVERS=kafka:9093 # Kafka container name and port
      - KAFKA_PRODUCER_BOOTSTRAP_SERVERS=kafka:9093 # Kafka container name and port
      - KAFKA_BROKERS=kafka:9093 # Kafka container name and port
    ports:
      - ${SPRING_LOCAL_PORT}:${SPRING_DOCKER_PORT}

  postgres:
    image: debezium/example-postgres:latest
    container_name: postgres
    env_file:
      - ./.env
    ports:
      - ${POSTGRES_LOCAL_PORT}:${POSTGRES_DOCKER_PORT}
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - db:/var/lib/postgres

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  prometheus:
    image: "prom/prometheus"
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./src/main/resources/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command: --web.enable-lifecycle --config.file=/etc/prometheus/prometheus.yml
    container_name: prometheus

  grafana:
    image: "grafana/grafana"
    restart: always
    ports:
      - "3000:3000"
    container_name: grafana

  redis:
    image: redis
    restart: always
    container_name: redis
    ports:
      - "6379:6379"

  zookeeper:
    image: "docker.io/bitnami/zookeeper:3"
    restart: always
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: "docker.io/bitnami/kafka:2-debian-10"
    restart: always
    ports:
      - "9092:9092"
    expose:
      - "9093"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ADVERTISED_LISTENERS=INSIDE://kafka:9093,OUTSIDE://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      - KAFKA_LISTENERS=INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=INSIDE
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    depends_on:
      - zookeeper

  kafka-ui:
    image: provectuslabs/kafka-ui
    restart: always
    container_name: kafka-ui
    ports:
      - "9091:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9093
      - KAFKA_CLUSTERS_0_ZOOKEEPER=localhost:2181

  new-relic-infra-agent:
    container_name: new-relic-infra-agent
    image: newrelic/infrastructure:latest
    cap_add:
      - SYS_PTRACE
    network_mode: host
    pid: host
    privileged: true
    volumes:
      - "/:/host:ro"
      - "/var/run/docker.sock:/var/run/docker.sock"
    restart: unless-stopped
    environment:
      NRIA_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
    deploy:
      replicas: ${NEW_RELIC_INFRA_AGENT_REPLICAS}

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  db:
